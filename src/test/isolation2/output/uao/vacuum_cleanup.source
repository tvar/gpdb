-- @Description Test that when AO vacuum skips drop phase, the age of
-- the AO/AOCS table gets reduced correctly.

CREATE EXTENSION IF NOT EXISTS gp_inject_fault;
CREATE

-- The age of the table is 1 after the following statement
2: create table ao_@orientation@_vacuum_cleanup2(a int, b int) with(appendonly=true, orientation=@orientation@);
CREATE
-- The age of the table is 2 after the following statement
2: insert into ao_@orientation@_vacuum_cleanup2 select 1, i from generate_series(1, 100) i;
INSERT 100
-- The age of the table is 3 after the following statement
2: update ao_@orientation@_vacuum_cleanup2 set b = b + 1;
UPDATE 100

1: set vacuum_freeze_min_age = 0;
SET
-- Check the age of the table just before vacuum
1: select age(relfrozenxid), regexp_replace(replace(relname, 'ao_@orientation@_vacuum_cleanup2'::regclass::oid::text, '<oid>'), 'ao.*seg', '<seg>') from gp_dist_random('pg_class') where relkind in ('r','t','o','b','m') and relstorage not in ('x','f','v') and (relname like '%' || 'ao_@orientation@_vacuum_cleanup2'::regclass::oid || '%') and gp_segment_id = 0;
age|regexp_replace    
---+------------------
3  |pg_<seg>_<oid>    
3  |pg_aovisimap_<oid>
(2 rows)

-- Hold AccessShareLock to make AO VACUUM skip drop phase
2: begin;
BEGIN
2: select count(*) from ao_@orientation@_vacuum_cleanup2;
count
-----
100  
(1 row)
1: vacuum ao_@orientation@_vacuum_cleanup2;
VACUUM

-- We expect the age to be 3. This is because all the xids before the first
-- vacuum will be frozen. The relfrozenxid will be the xid of the last
-- transaction before the vacuum (in this case it is the update statement)
1: select age(relfrozenxid), regexp_replace(replace(relname, 'ao_@orientation@_vacuum_cleanup2'::regclass::oid::text, '<oid>'), 'ao.*seg', '<seg>') from gp_dist_random('pg_class') where relkind in ('r','t','o','b','m') and relstorage not in ('x','f','v') and (relname like '%' || 'ao_@orientation@_vacuum_cleanup2'::regclass::oid || '%') and gp_segment_id = 0;
age|regexp_replace    
---+------------------
3  |pg_<seg>_<oid>    
3  |pg_aovisimap_<oid>
(2 rows)
2: end;
END

-- Check that drop phase is skipped, but still the cleanup phase is performed
-- when there are concurrent serializable transactions

1: create table ao_@orientation@_vacuum_cleanup3(a int, b int) with(appendonly=true, orientation=@orientation@);
CREATE
1: insert into ao_@orientation@_vacuum_cleanup3 select i, i from generate_series(1, 100) i;
INSERT 100
1: delete from ao_@orientation@_vacuum_cleanup3;
DELETE 100

-- Check the age of the table before vacuum to make sure that clean phase gets
-- performed
1: select age(relfrozenxid), regexp_replace(replace(relname, 'ao_@orientation@_vacuum_cleanup3'::regclass::oid::text, '<oid>'), 'ao.*seg', '<seg>') from gp_dist_random('pg_class') where relkind in ('r','t','o','b','m') and relstorage not in ('x','f','v') and (relname like '%' || 'ao_@orientation@_vacuum_cleanup3'::regclass::oid || '%') and gp_segment_id = 0;
age|regexp_replace    
---+------------------
3  |pg_<seg>_<oid>    
3  |pg_aovisimap_<oid>
(2 rows)
1: select gp_inject_fault('vacuum_relation_open_relation_during_drop_phase', 'suspend', 1);
gp_inject_fault
---------------
t              
(1 row)
1&: vacuum ao_@orientation@_vacuum_cleanup3;  <waiting ...>

-- Wait till compaction phase is completed and only then start the serializable
-- transaction to ensure that only drop phase is skipped
2: select wait_for_trigger_fault((select current_database()), 'vacuum_relation_open_relation_during_drop_phase', 1);
wait_for_trigger_fault
----------------------
t                     
(1 row)
2: begin isolation level serializable;
BEGIN
2: select 123;
?column?
--------
123     
(1 row)
2: select gp_inject_fault('vacuum_relation_open_relation_during_drop_phase', 'reset', 1);
gp_inject_fault
---------------
t              
(1 row)

1<:  <... completed>
VACUUM
1: select age(relfrozenxid), regexp_replace(replace(relname, 'ao_@orientation@_vacuum_cleanup3'::regclass::oid::text, '<oid>'), 'ao.*seg', '<seg>') from gp_dist_random('pg_class') where relkind in ('r','t','o','b','m') and relstorage not in ('x','f','v') and (relname like '%' || 'ao_@orientation@_vacuum_cleanup3'::regclass::oid || '%') and gp_segment_id = 0;
age|regexp_replace    
---+------------------
1  |pg_<seg>_<oid>    
1  |pg_aovisimap_<oid>
(2 rows)

-- Validate that the drop phase was skipped. segfile 1 should be in state 2
-- (AWAITING_DROP)
1: SELECT gp_ao_or_aocs_seg_name('ao_@orientation@_vacuum_cleanup3') from gp_dist_random('gp_id');
gp_ao_or_aocs_seg_name
----------------------
(1,37,1,3,2)          
(2,0,1,3,1)           
(1,31,1,3,2)          
(2,0,1,3,1)           
(1,32,1,3,2)          
(2,0,1,3,1)           
(6 rows)

2: commit;
COMMIT
