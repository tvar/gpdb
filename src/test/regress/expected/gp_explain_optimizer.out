create schema gpexplain;
set search_path = gpexplain;
-- Helper function, to return the EXPLAIN output of a query as a normal
-- result set, so that you can manipulate it further.
create or replace function get_explain_output(explain_query text) returns setof text as
$$
declare
  explainrow text;
begin
  for explainrow in execute 'EXPLAIN ' || explain_query
  loop
    return next explainrow;
  end loop;
end;
$$ language plpgsql;
-- Same, for EXPLAIN ANALYZE
create or replace function get_explain_analyze_output(explain_query text) returns setof text as
$$
declare
  explainrow text;
begin
  for explainrow in execute 'EXPLAIN ANALYZE ' || explain_query
  loop
    return next explainrow;
  end loop;
end;
$$ language plpgsql;
--
-- Test explain_memory_verbosity option
-- 
CREATE TABLE explaintest (id int4);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO explaintest SELECT generate_series(1, 10);
EXPLAIN ANALYZE SELECT * FROM explaintest;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=10 width=4)
   Rows out:  10 rows at destination with 0.412 ms to first row, 0.425 ms to end, start offset by 0.288 ms.
   ->  Table Scan on explaintest  (cost=0.00..431.00 rows=4 width=4)
         Rows out:  Avg 3.3 rows x 3 workers.  Max 5 rows (seg1) with 0.021 ms to first row, 0.023 ms to end, start offset by 0.607 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 50K bytes avg x 3 workers, 50K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  optimizer=on
 Optimizer status: PQO version 2.5.0
 Total runtime: 1.269 ms
(12 rows)

set explain_memory_verbosity='summary';
-- The plan should consist of a Gather and a Seq Scan, with a
-- "Memory: ..." line on both nodes.
SELECT COUNT(*) from
  get_explain_analyze_output($$
    SELECT * FROM explaintest;
  $$) as et
WHERE et like '%Memory: %';
 count 
-------
     2
(1 row)

reset explain_memory_verbosity;
-- Verify that the column references are OK. This tests for an old ORCA bug,
-- where the Filter clause in the IndexScan of this query was incorrectly
-- printed as something like:
--
--   Filter: "outer".column2 = mpp22263.*::text
CREATE TABLE mpp22263 (
        unique1         int4,
        unique2         int4,
        two                     int4,
        four            int4,
        ten                     int4,
        twenty          int4,
        hundred         int4,
        thousand        int4,
        twothousand     int4,
        fivethous       int4,
        tenthous        int4,
        odd                     int4,
        even            int4,
        stringu1        name,
        stringu2        name,
        string4         name
) distributed by (unique1);
create index mpp22263_idx1 on mpp22263 using btree(unique1);
explain select * from mpp22263, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
WHERE mpp22263.unique1 = v.i and mpp22263.stringu1 = v.j;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..2.00 rows=1 width=256)
   ->  Nested Loop  (cost=0.00..2.00 rows=1 width=256)
         Join Filter: true
         ->  Result  (cost=0.00..0.00 rows=1 width=12)
               ->  Values Scan on "Values"  (cost=0.00..0.00 rows=1 width=12)
         ->  Index Scan using mpp22263_idx1 on mpp22263  (cost=0.00..2.00 rows=1 width=244)
               Index Cond: mpp22263.unique1 = "Values".column1
               Filter: mpp22263.stringu1::text = "Values".column2
 Optimizer status: PQO version 2.35.1
(9 rows)

-- atmsort.pm masks out differences in the Filter line, so just memorizing
-- the output of the above EXPLAIN isn't enough to catch a faulty Filter line.
-- Extract the Filter explicitly.
SELECT * from
  get_explain_output($$
select * from mpp22263, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
WHERE mpp22263.unique1 = v.i and mpp22263.stringu1 = v.j;
  $$) as et
WHERE et like '%Filter: %';
                                et                                
------------------------------------------------------------------
         Join Filter: true
               Filter: mpp22263.stringu1::text = "Values".column2
(2 rows)

--
-- Join condition in explain plan should represent constants with proper
-- variable name
--
create table foo (a int) distributed randomly;
-- "outer", "inner" prefix must also be prefixed to variable name as length of rtable > 1
SELECT * from
get_explain_output($$ 
	select * from (values (1)) as f(a) join (values(2)) b(b) on a = b join foo on true join foo as foo2 on true $$) as et
WHERE et like '%Hash Cond:%';
                                et                                
------------------------------------------------------------------
                     Hash Cond: "outer".column1 = "outer".column1
(1 row)

SELECT * from
get_explain_output($$
	select * from (values (1)) as f(a) join (values(2)) b(b) on a = b$$) as et
WHERE et like '%Hash Cond:%';
               et               
--------------------------------
   Hash Cond: column1 = column1
(1 row)

